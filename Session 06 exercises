Exercise 1
Ask the user to input 'S06_exercise_1.txt' and use 'try and except' to exit out the program if the user enters an invalid entry.

Exercise 2
Each line in 'S06_exercise_2.txt' contains an identifier code to an unknown sample. Each part of the identifier code is seperated 
by '-'. Output on your terminal in list form each section of the identifier code.
For example: aaaa-1111-2222-bbbb should be outputted as ['aaaa', '1111', '2222', 'bbbb']
Hint: Recall what split() does

Exercise 3
Open the same document from exercise 2, output on your terminal a list containing the third part of each identifier code.
For example:
aaa-111-222-ccc
bbb-333-555-qqq
Output should be: ['222', '555']

Exercise 4
Ask the user to open up 'S06_exercise_4.txt'. Each line contains nucleotide sequences. Use try and except to catch an improper 
input, and if the input is incorrect, the script should loop back to the beginning until the user enters the correct input.
Parse the the text document and output on your terminal a list of the lengths of each sequence in descending order.

Exercise 5
There are some sequences in 'S06_exercise_4.txt' with ambiguous bases ('n'). Parse the document again and output on your 
terminal the total number of sequences with ambigous bases.
